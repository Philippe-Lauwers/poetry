# WritingAssistantInterface/routes.py

import os
import requests
import random
from flask import Blueprint, render_template, request, jsonify

# Load env (optional if already done in app.py)
from dotenv import load_dotenv
load_dotenv()

# Compute backend URL once
BACKEND_URL = os.getenv("BACKEND_URL", "http://127.0.0.1:5050")

# Create a Blueprint
main_bp = Blueprint(
    "main",
    __name__,
    static_folder="static",
    template_folder="templates",
)

@main_bp.route('/')
def home():
    resp = requests.get(f"{BACKEND_URL}/webLists")
    weblists = resp.json()['weblists']

    # Look for the 'form' section of the json input
    weblists_form = None
    for section in weblists:
        if 'form' in section.keys(): # section will only have one key anyway
            weblists_form = section['form']
            break
    dfltLang = None
    for it in weblists:
        if 'lang' in it.keys():
            for l in it['lang']['options']:
                if 'default' in l.keys():
                    dfltLang = l['label'][0:2].lower()
                    break;
            if dfltLang == None:
                dfltLang = it['lang']['options'][0]['label'][0:2].lower()
    return render_template('index.html', weblists=weblists, weblists_form=weblists_form,
                           randomPlaceholder=pickPlaceholder(dfltLang))


def pickPlaceholder(lang):
    # Placeholders for the title field, in the style of famous poets, generated by ChatGPT 4o as I could not,
    # by any means write this type of text myself
    if lang == 'en':
        placeholders = [
            # Shakespearean */
            "Pray, endow upon this tome thine own beauteous epithet.",
            "Anoint this scroll with thy most wondrous moniker.",
            "Do grant this work the charm of thy fairest title.",
            "Bestow, I beseech thee, upon these words thy peerless name.",
            "Let thy wit christen this verse with a name most divine.",
            # Poe‑flavored */
            "Whisper here the name that haunts thy darkling soul.",
            "Imprint upon this page the shadowed name thou hold’st dearest.",
            "Reveal the title that stirs within thy midnight heart.",
            "Inscribe here the epithet that lingers in thy sombre reveries.",
            # Wilde‑esque */
            "Dare to christen this modest volume with your most exquisite epithet.",
            "Impart upon these pages the graceful title of thine own inventing.",
            "Endow this little masterpiece with the flourish of your finest name.",
            "Grant this humble opus the elegance of your singular designation.",
            "Crown this collection with whatever title your genius deems worthy.",
            # Dickinson
            "Title it slant — the truth prefers disguise.",
            "Begin — though silence might answer back.",
            "A dash, a breath — your title takes shape.",
            "The soul selects its own title — quietly.",
            "In quiet rooms, an eternity of titles starts small."
            # Eliot
            "In the wasteland, find your title among ruins.",
            "Shape your words like fragments shored against silence.",
            "Between the motion and the act, name it.",
            "Time future and time past echo in this line.",
            "Let the evening spread out against your title."
            # Ginsberg
            "Start with a howl — or a whisper that bites.",
            "Title it like a jazz riff played backwards.",
            "Let your title  break the law of gravity.",
            "A raw nerve, a streetlamp — name it what burns.",
            "Begin with your lungs — scream it into being."
        ]
    else:
        placeholders = [
            # Beaudelaire
            "Sous l’ombre des cendres et des roses, dis ta douleur.",
            "Un titre né d’un rêve d’opium et de soie fanée.",
            "Murmure ta blessure à la nuit de velours.",
            "La lune dévore ton nom comme une prière mourante.",
            "Du parfum et de la pourriture, fais naître ton poème."
            # Mallarmé
            "Épars ta pensée sur les plis du silence.",
            "Un titre perdu dans la brume des symboles.",
            "Que l’ombre tisse ton dire à la lumière des étoiles.",
            "Le cygne rêve encore de vers de cristal — écris.",
            "Invoque l’impossible avec un mot impalpable."
            # Prévert
            "Appelle-le comme tu veux — du moment que c’est vrai.",
            "Une feuille, un baiser, un café — ton poème commence ici.",
            "Mets ton cœur sur la ligne. Ce n’est qu’un titre.",
            "Commence par l’amour, ou peut-être un pigeon.",
            "Dis-le comme un enfant le dirait."
            # Voltaire
            "Écris avec raison, même quand elle s’égare.",
            "Une étincelle d’esprit pour brûler le voile du mensonge.",
            "Que la satire sourie sous ton noble vers.",
            "Dans ton titre, sème une graine de révolte.",
            "La vérité court plus vite quand elle rime bien."
            # Becket
            "Échoue mieux, mais nomme-le d’abord.",
            "Un murmure. Une pause. Cela suffit.",
            "Laisse le silence dire ce qu’il veut.",
            "Aucun titre ne convient. Utilise celui-ci quand même.",
            "Écris ce qui s’efface — il n’y a rien d’autre."
        ]

    return random.choice(placeholders)


@main_bp.route('/generatePoem', methods=['POST'])
def genPoem():
    # proxy form data to your backend /write
    params = request.get_json(force=True)
    resp = requests.post(f"{BACKEND_URL}/generatePoem",
        json=params,               # <— send JSON, not form-data
        headers={'Content-Type': 'application/json'})
    return jsonify(resp.json())

@main_bp.route('/generateVerse', methods=['POST'])
def genVerse():
    # proxy form data to your backend /write
    params = request.get_json(force=True)
    resp = requests.post(f"{BACKEND_URL}/generateVerse",
        json=params,               # <— send JSON, not form-data
        headers={'Content-Type': 'application/json'})
    return jsonify(resp.json())

@main_bp.route('/acceptSuggestion', methods=['POST'])
def accSuggestion():
    params = request.get_json(force=True)
    # print(request.form.get('action'))
    resp = requests.post(f"{BACKEND_URL}/acceptSuggestion",
                         json=params,  # <— send JSON, not form-data
                            headers={'Content-Type': 'application/json'})
    return jsonify(resp.json())

@main_bp.route('/poemForm', methods=['GET'])
def poemForm():
    lang = request.args.get('lang', default='1', type=str)
    form = request.args.get('form', default='1', type=str)
    params = {'lang':lang,'form':form}
    resp = requests.get(f"{BACKEND_URL}/poemForm", params=params)
    return jsonify(resp.json())

@main_bp.route('/savePoem', methods=['POST'])
def savePoem():
    params = request.get_json(force=True)
    resp = requests.post(f"{BACKEND_URL}/savePoem",
        json=params,               # <— send JSON, not form-data
        headers={'Content-Type': 'application/json'})
    return jsonify(resp.json())

@main_bp.route('/randomKeywords', methods=['POST'])
def randomKeywords():
    params = request.get_json(force=True)
    resp = requests.post(f"{BACKEND_URL}/randomKeywords",
                        json=params,
                        headers={'Content-Type':'application/json'})
    return jsonify(resp.json())

@main_bp.route('/acceptKeywordSuggestion', methods=['POST'])
def acceptKeywordSuggestion():
    params = request.get_json(force=True)
    resp = requests.post(f"{BACKEND_URL}/acceptKeywordSuggestion",
                        json=params,
                        headers={'Content-Type':'application/json'})
    return jsonify(resp.json())

@main_bp.route('/saveKeywords', methods=['POST'])
def saveKeywords():
    params = request.get_json(force=True)
    resp = requests.post(f"{BACKEND_URL}/saveKeywords",
                        json=params,
                        headers={'Content-Type':'application/json'})
    return jsonify(resp.json())
@main_bp.route('/deleteKeyword', methods=['POST'])
def deleteKeyword():
    params = request.get_json(force=True)
    resp = requests.post(f"{BACKEND_URL}/deleteKeyword",
                        json=params,
                        headers={'Content-Type':'application/json'})
    return jsonify(resp.json())
@main_bp.route('/log', methods=['POST'])
def log():
    data = request.json
    # for now just print to console
    print("FORM SUBMITTED:", data)
    return '', 204
